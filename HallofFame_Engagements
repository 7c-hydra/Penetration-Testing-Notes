These are my most memorable LIVE real-world penetration testing findings. All live engagements. All sensitive data is removed here. 

#BEST:
1. SQLi into Shell
Details:
 During a web application penetration test, I found that the login and 'forgot password' functionality retained SQL injection that resulted in a shell being called back to my server. 
 SQLMap with the --os-shell flag successfully called back using the PHP web server language. 
 This dropped me into a SQL-shell. This access permitted me to dump the databases which included sensitive data and unencrypted passwords. 
 The passwords were confirmed through user hijacking attacks (loging into victim users accounts). An immediate call to the client happened by the end of the day.
 Technology: IIS8.5, PHP Application (phpMyAdmin), MySQL, Hosted in AWS

Impact
Server and database compromise. 

Remediation/Fixes
System was decommissioned immediately. 
- WAF: I advised a deploying a front-end WAF if the system could not be fixed right away. 
- Secure Coding: Then to schedule secure coding to deal with the injection vulnerability using input validation and parameterized queries 
- Secure Architecture: The database should be migrated to a second system, rather than colocated with the web server. All sensitive data within the database should be encrypted using a modern standard (e.g. AES).
- Encrypt Data at Rest: User account passwords should be considered compromised and rotated pending security corrections that prevent the attack repeating.
- Notify Parties: Advised that the application owners alert clients and relevant parties to the security situation. 
- Investigate: If possible, investigate logs to see if there is an existing or previous compromise.
- Logging and Alerting: If not already implemented, institute alerting and monitoring to assist with any future breaches. 
- Software Maintenance: Ensure that software, including the OS, PHP, and MySQL are all routinely patched using a software maintenance program. 

2. Citrix Breakout
Details

Impact

Remediation/Fixes


3. Two-Tier Thick Client 
Details

Impact

Remediation/Fixes

#WORST:
1. Double VPN to Perform Azure Security Configuration Audit
Details

2. Healthcare App 
Details: Very focused web application test with broken functionality. At the conclusion of the test, the POC argued about vulnerabilities. 
